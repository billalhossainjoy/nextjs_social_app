generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?   @unique
  avatarUrl    String?
  bio          String?
  createdAt    DateTime  @default(now())
  sessions     Session[]

  following Follow[] @relation("following")
  followers Follow[] @relation("followers")

  createat  DateTime   @default(now())
  posts     Post[]
  likes     like[]
  bookmarks Bookmark[]
  comments  Comment[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  attachments Media[]
  likes       like[]
  bookmarks   Bookmark[]
  comments    Comment[]

  @@map("posts")
}

model like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Follow {
  followerId  String
  follower    User   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  folowing    User   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Media {
  id     String  @id @default(uuid())
  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)

  type MediaType
  url  String

  createdAt DateTime @default(now())

  @@map("post_media")
}

model Comment {
  id      String @id @default(uuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Bookmark {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

enum MediaType {
  IMAGE
  VIDEO
}
